"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _ = _interopRequireDefault(require("."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var items = [{
  value: 'ocean',
  label: 'Ocean',
  color: '#00B8D9',
  isFixed: true
}, {
  value: 'blue',
  label: 'Blue',
  color: '#0052CC',
  isDisabled: true
}, {
  value: 'purple',
  label: 'Purple',
  color: '#5243AA'
}, {
  value: 'red',
  label: 'Red',
  color: '#FF5630',
  isFixed: true
}, {
  value: 'orange',
  label: 'Orange',
  color: '#FF8B00'
}, {
  value: 'yellow',
  label: 'Yellow',
  color: '#FFC400'
}, {
  value: 'green',
  label: 'Green',
  color: '#36B37E'
}, {
  value: 'forest',
  label: 'Forest',
  color: '#00875A'
}, {
  value: 'slate',
  label: 'Slate',
  color: '#253858'
}, {
  value: 'silver',
  label: 'Silver',
  color: '#666666'
}];
var currentItem = [items[4], items[5]];
(0, _react2.storiesOf)("Components|Input/Select", module).add("default", function () {
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: '80%',
      marginLeft: '1%',
      padding: '9px'
    }
  }, /*#__PURE__*/_react.default.createElement(_.default, {
    caption: "Annual salary expectation",
    data: 'AnyObjectOrString',
    className: 'AnyObjectOrString',
    currentItem: currentItem,
    items: items,
    isMulti: true,
    description: "See salaries for this position",
    descriptionColor: "primary",
    leftText: "$CAD",
    onEvent: function onEvent(e) {
      console.log(e);
    }
  }));
}).add("single", function () {
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: '80%',
      marginLeft: '1%',
      padding: '9px'
    }
  }, /*#__PURE__*/_react.default.createElement(_.default, {
    caption: "Annual salary expectation",
    data: 'AnyObjectOrString',
    className: 'AnyObjectOrString',
    currentItem: currentItem,
    items: items,
    description: "See salaries for this position",
    descriptionColor: "primary",
    leftText: "$CAD",
    onEvent: function onEvent(e) {
      console.log(e);
    }
  }));
}).add("border remover", function () {
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: '80%',
      marginLeft: '1%',
      padding: '9px'
    }
  }, /*#__PURE__*/_react.default.createElement(_.default, {
    removeBorder: true,
    caption: "Annual salary expectation",
    data: 'AnyObjectOrString',
    className: 'AnyObjectOrString',
    currentItem: currentItem,
    items: items,
    description: "See salaries for this position",
    descriptionColor: "primary",
    leftText: "$CAD",
    onEvent: function onEvent(e) {
      console.log(e);
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0NvbXBvbmVudHMvSW5wdXQvU2VsZWN0L3N0b3JpZXMuanMiXSwibmFtZXMiOlsiaXRlbXMiLCJ2YWx1ZSIsImxhYmVsIiwiY29sb3IiLCJpc0ZpeGVkIiwiaXNEaXNhYmxlZCIsImN1cnJlbnRJdGVtIiwibW9kdWxlIiwiYWRkIiwid2lkdGgiLCJtYXJnaW5MZWZ0IiwicGFkZGluZyIsImUiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsS0FBSyxHQUFHLENBQ1o7QUFBRUMsRUFBQUEsS0FBSyxFQUFFLE9BQVQ7QUFBa0JDLEVBQUFBLEtBQUssRUFBRSxPQUF6QjtBQUFrQ0MsRUFBQUEsS0FBSyxFQUFFLFNBQXpDO0FBQW9EQyxFQUFBQSxPQUFPLEVBQUU7QUFBN0QsQ0FEWSxFQUVaO0FBQUVILEVBQUFBLEtBQUssRUFBRSxNQUFUO0FBQWlCQyxFQUFBQSxLQUFLLEVBQUUsTUFBeEI7QUFBZ0NDLEVBQUFBLEtBQUssRUFBRSxTQUF2QztBQUFrREUsRUFBQUEsVUFBVSxFQUFFO0FBQTlELENBRlksRUFHWjtBQUFFSixFQUFBQSxLQUFLLEVBQUUsUUFBVDtBQUFtQkMsRUFBQUEsS0FBSyxFQUFFLFFBQTFCO0FBQW9DQyxFQUFBQSxLQUFLLEVBQUU7QUFBM0MsQ0FIWSxFQUlaO0FBQUVGLEVBQUFBLEtBQUssRUFBRSxLQUFUO0FBQWdCQyxFQUFBQSxLQUFLLEVBQUUsS0FBdkI7QUFBOEJDLEVBQUFBLEtBQUssRUFBRSxTQUFyQztBQUFnREMsRUFBQUEsT0FBTyxFQUFFO0FBQXpELENBSlksRUFLWjtBQUFFSCxFQUFBQSxLQUFLLEVBQUUsUUFBVDtBQUFtQkMsRUFBQUEsS0FBSyxFQUFFLFFBQTFCO0FBQW9DQyxFQUFBQSxLQUFLLEVBQUU7QUFBM0MsQ0FMWSxFQU1aO0FBQUVGLEVBQUFBLEtBQUssRUFBRSxRQUFUO0FBQW1CQyxFQUFBQSxLQUFLLEVBQUUs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V0FBVyxFQUFFTCxXQUxmO0FBTUUsSUFBQSxLQUFLLEVBQUVOLEtBTlQ7QUFPRSxJQUFBLFdBQVcsRUFBQyxnQ0FQZDtBQVFFLElBQUEsZ0JBQWdCLEVBQUMsU0FSbkI7QUFTRSxJQUFBLFFBQVEsRUFBQyxNQVRYO0FBVUUsSUFBQSxPQUFPLEVBQUUsaUJBQUFZLENBQUMsRUFBSTtBQUNaQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBWjtBQUNEO0FBWkgsSUFERixDQURxQjtBQUFBLENBcEN6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHN0b3JpZXNPZiB9IGZyb20gXCJAc3Rvcnlib29rL3JlYWN0XCI7XG5pbXBvcnQgVkhTZWxlY3QgZnJvbSBcIi5cIjtcblxuY29uc3QgaXRlbXMgPSBbXG4gIHsgdmFsdWU6ICdvY2VhbicsIGxhYmVsOiAnT2NlYW4nLCBjb2xvcjogJyMwMEI4RDknLCBpc0ZpeGVkOiB0cnVlIH0sXG4gIHsgdmFsdWU6ICdibHVlJywgbGFiZWw6ICdCbHVlJywgY29sb3I6ICcjMDA1MkNDJywgaXNEaXNhYmxlZDogdHJ1ZSB9LFxuICB7IHZhbHVlOiAncHVycGxlJywgbGFiZWw6ICdQdXJwbGUnLCBjb2xvcjogJyM1MjQzQUEnIH0sXG4gIHsgdmFsdWU6ICdyZWQnLCBsYWJlbDogJ1JlZCcsIGNvbG9yOiAnI0ZGNTYzMCcsIGlzRml4ZWQ6IHRydWUgfSxcbiAgeyB2YWx1ZTogJ29yYW5nZScsIGxhYmVsOiAnT3JhbmdlJywgY29sb3I6ICcjRkY4QjAwJyB9LFxuICB7IHZhbHVlOiAneWVsbG93JywgbGFiZWw6ICdZZWxsb3cnLCBjb2xvcjogJyNGRkM0MDAnIH0sXG4gIHsgdmFsdWU6ICdncmVlbicsIGxhYmVsOiAnR3JlZW4nLCBjb2xvcjogJyMzNkIzN0UnIH0sXG4gIHsgdmFsdWU6ICdmb3Jlc3QnLCBsYWJlbDogJ0ZvcmVzdCcsIGNvbG9yOiAnIzAwODc1QScgfSxcbiAgeyB2YWx1ZTogJ3NsYXRlJywgbGFiZWw6ICdTbGF0ZScsIGNvbG9yOiAnIzI1Mzg1OCcgfSxcbiAgeyB2YWx1ZTogJ3NpbHZlcicsIGxhYmVsOiAnU2lsdmVyJywgY29sb3I6ICcjNjY2NjY2JyB9LFxuXVxuXG5jb25zdCBjdXJyZW50SXRlbSA9IFtpdGVtc1s0XSwgaXRlbXNbNV1dXG5cbnN0b3JpZXNPZihcIkNvbXBvbmVudHN8SW5wdXQvU2VsZWN0XCIsIG1vZHVsZSlcbiAgLmFkZChcImRlZmF1bHRcIiwgKCkgPT4gKFxuICAgIDxkaXYgc3R5bGU9e3t3aWR0aDogJzgwJScsIG1hcmdpbkxlZnQ6JzElJywgcGFkZGluZzogJzlweCd9fT5cbiAgICAgIDxWSFNlbGVjdFxuICAgICAgICBjYXB0aW9uPVwiQW5udWFsIHNhbGFyeSBleHBlY3RhdGlvblwiXG4gICAgICAgIGRhdGE9eydBbnlPYmplY3RPclN0cmluZyd9XG4gICAgICAgIGNsYXNzTmFtZT17J0FueU9iamVjdE9yU3RyaW5nJ31cbiAgICAgICAgY3VycmVudEl0ZW09e2N1cnJlbnRJdGVtfVxuICAgICAgICBpdGVtcz17aXRlbXN9XG4gICAgICAgIGlzTXVsdGlcbiAgICAgICAgZGVzY3JpcHRpb249XCJTZWUgc2FsYXJpZXMgZm9yIHRoaXMgcG9zaXRpb25cIlxuICAgICAgICBkZXNjcmlwdGlvbkNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgIGxlZnRUZXh0PVwiJENBRFwiXG4gICAgICAgIG9uRXZlbnQ9e2UgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApKVxuICAuYWRkKFwic2luZ2xlXCIsICgpID0+IChcbiAgICA8ZGl2IHN0eWxlPXt7d2lkdGg6ICc4MCUnLCBtYXJnaW5MZWZ0OicxJScsIHBhZGRpbmc6ICc5cHgnfX0+XG4gICAgICA8VkhTZWxlY3RcbiAgICAgICAgY2FwdGlvbj1cIkFubnVhbCBzYWxhcnkgZXhwZWN0YXRpb25cIlxuICAgICAgICBkYXRhPXsnQW55T2JqZWN0T3JTdHJpbmcnfVxuICAgICAgICBjbGFzc05hbWU9eydBbnlPYmplY3RPclN0cmluZyd9XG4gICAgICAgIGN1cnJlbnRJdGVtPXtjdXJyZW50SXRlbX1cbiAgICAgICAgaXRlbXM9e2l0ZW1zfVxuICAgICAgICBkZXNjcmlwdGlvbj1cIlNlZSBzYWxhcmllcyBmb3IgdGhpcyBwb3NpdGlvblwiXG4gICAgICAgIGRlc2NyaXB0aW9uQ29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgbGVmdFRleHQ9XCIkQ0FEXCJcbiAgICAgICAgb25FdmVudD17ZSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICkpXG4gIC5hZGQoXCJib3JkZXIgcmVtb3ZlclwiLCAoKSA9PiAoXG4gICAgPGRpdiBzdHlsZT17e3dpZHRoOiAnODAlJywgbWFyZ2luTGVmdDonMSUnLCBwYWRkaW5nOiAnOXB4J319PlxuICAgICAgPFZIU2VsZWN0XG4gICAgICAgIHJlbW92ZUJvcmRlclxuICAgICAgICBjYXB0aW9uPVwiQW5udWFsIHNhbGFyeSBleHBlY3RhdGlvblwiXG4gICAgICAgIGRhdGE9eydBbnlPYmplY3RPclN0cmluZyd9XG4gICAgICAgIGNsYXNzTmFtZT17J0FueU9iamVjdE9yU3RyaW5nJ31cbiAgICAgICAgY3VycmVudEl0ZW09e2N1cnJlbnRJdGVtfVxuICAgICAgICBpdGVtcz17aXRlbXN9XG4gICAgICAgIGRlc2NyaXB0aW9uPVwiU2VlIHNhbGFyaWVzIGZvciB0aGlzIHBvc2l0aW9uXCJcbiAgICAgICAgZGVzY3JpcHRpb25Db2xvcj1cInByaW1hcnlcIlxuICAgICAgICBsZWZ0VGV4dD1cIiRDQURcIlxuICAgICAgICBvbkV2ZW50PXtlID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKSk7XG4iXX0=