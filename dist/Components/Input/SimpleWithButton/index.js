"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = require("../../../Grid/index");

var _index2 = _interopRequireDefault(require("../Simple/index"));

var _index3 = _interopRequireDefault(require("../../Button/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VHInputSimpleWithButton = function VHInputSimpleWithButton(props) {
  return /*#__PURE__*/_react.default.createElement(_index.Row, {
    row: true
  }, /*#__PURE__*/_react.default.createElement(_index.Row, {
    width: "85%",
    style: {
      marginRight: "4px"
    }
  }, /*#__PURE__*/_react.default.createElement(_index2.default, {
    disabled: props.disabled,
    error: props.error,
    loading: props.loading,
    placeholder: props.placeholder,
    data: props.data,
    value: props.value,
    onEvent: props.onEvent
  })), /*#__PURE__*/_react.default.createElement(_index.Row, {
    width: "15%"
  }, /*#__PURE__*/_react.default.createElement(_index3.default, {
    primary: true,
    lg: true,
    onEvent: props.onEvent,
    label: props.label
  })));
};

VHInputSimpleWithButton.defaultProps = {
  className: '',
  disabled: false,
  error: false,
  loading: false
};
VHInputSimpleWithButton.propTypes = {
  disabled: _propTypes.default.bool,
  error: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  onEvent: _propTypes.default.func,
  datat: _propTypes.default.string,
  label: _propTypes.default.string
};
var _default = VHInputSimpleWithButton;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0NvbXBvbmVudHMvSW5wdXQvU2ltcGxlV2l0aEJ1dHRvbi9pbmRleC5qc3giXSwibmFtZXMiOlsiVkhJbnB1dFNpbXBsZVdpdGhCdXR0b24iLCJwcm9wcyIsIm1hcmdpblJpZ2h0IiwiZGlzYWJsZWQiLCJlcnJvciIsImxvYWRpbmciLCJwbGFjZWhvbGRlciIsImRhdGEiLCJ2YWx1ZSIsIm9uRXZlbnQiLCJsYWJlbCIsImRlZmF1bHRQcm9wcyIsImNsYXNzTmFtZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImJvb2wiLCJzdHJpbmciLCJmdW5jIiwiZGF0YXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUdBLElBQU1BLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsQ0FBQUMsS0FBSyxFQUFJO0FBQ3ZDLHNCQUNFLDZCQUFDLFVBQUQ7QUFBSyxJQUFBLEdBQUc7QUFBUixrQkFDSSw2QkFBQyxVQUFEO0FBQUssSUFBQSxLQUFLLEVBQUUsS0FBWjtBQUFtQixJQUFBLEtBQUssRUFBRTtBQUFDQyxNQUFBQSxXQUFXLEVBQUU7QUFBZDtBQUExQixrQkFDSSw2QkFBQyxlQUFEO0FBQ0ksSUFBQSxRQUFRLEVBQUVELEtBQUssQ0FBQ0UsUUFEcEI7QUFFSSxJQUFBLEtBQUssRUFBRUYsS0FBSyxDQUFDRyxLQUZqQjtBQUdJLElBQUEsT0FBTyxFQUFFSCxLQUFLLENBQUNJLE9BSG5CO0FBSUksSUFBQSxXQUFXLEVBQUVKLEtBQUssQ0FBQ0ssV0FKdkI7QUFLSSxJQUFBLElBQUksRUFBRUwsS0FBSyxDQUFDTSxJQUxoQjtBQU1JLElBQUEsS0FBSyxFQUFFTixLQUFLLENBQUNPLEtBTmpCO0FBT0ksSUFBQSxPQUFPLEVBQUVQLEtBQUssQ0FBQ1E7QUFQbkIsSUFESixDQURKLGVBWUksNkJBQUMsVUFBRDtBQUFLLElBQUEsS0FBSyxFQUFFO0FBQVosa0JBQ0ksNkJBQUMsZUFBRDtBQUNJLElBQUEsT0FBTyxNQURYO0FBRUksSUFBQSxFQUFFLE1BRk47QUFHSSxJQUFBLE9BQU8sRUFBRVIsS0FBSyxDQUFDUSxPQUhuQjtBQUlJLElBQUEsS0FBSyxFQUFFUixLQUFLLENBQUNTO0FBSmpCLElBREosQ0FaSixDQURGO0FBdUJELENBeEJEOztBQTBCQVYsdUJBQXVCLENBQUNXLFlBQXhCLEdBQXVDO0FBQ25DQyxFQUFBQSxTQUFTLEVBQUUsRUFEd0I7QUFFbkNULEVBQUFBLFFBQVEsRUFBRSxLQUZ5QjtBQUduQ0MsRUFBQUEsS0FBSyxFQUFFLEtBSDRCO0FBSW5DQyxFQUFBQSxPQUFPLEVBQUU7QUFKMEIsQ0FBdkM7QUFPQUwsdUJBQXVCLENBQUNhLFNBQXhCLEdBQW9DO0FBQ2hDVixFQUFBQSxRQUFRLEVBQUVXLG1CQUFVQyxJQURZO0FBRWhDWCxFQUFBQSxLQUFLLEVBQUVVLG1CQUFVQyxJQUZlO0FBR2hDVixFQUFBQSxPQUFPLEVBQUVTLG1CQUFVQyxJQUhhO0FBSWhDVCxFQUFBQSxXQUFXLEVBQUVRLG1CQUFVRSxNQUpTO0FBS2hDUCxFQUFBQSxPQUFPLEVBQUVLLG1CQUFVRyxJQUxhO0FBTWhDQyxFQUFBQSxLQUFLLEVBQUVKLG1CQUFVRSxNQU5lO0FBT2hDTixFQUFBQSxLQUFLLEVBQUVJLG1CQUFVRTtBQVBlLENBQXBDO2VBVWVoQix1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUm93IH0gZnJvbSAnLi4vLi4vLi4vR3JpZC9pbmRleCc7XG5pbXBvcnQgVkhJbnB1dCBmcm9tICcuLi9TaW1wbGUvaW5kZXgnO1xuaW1wb3J0IFZIQnV0dG9uIGZyb20gJy4uLy4uL0J1dHRvbi9pbmRleCc7XG5cblxuY29uc3QgVkhJbnB1dFNpbXBsZVdpdGhCdXR0b24gPSBwcm9wcyA9PiB7XG4gIHJldHVybiAoXG4gICAgPFJvdyByb3c+XG4gICAgICAgIDxSb3cgd2lkdGg9e1wiODUlXCJ9IHN0eWxlPXt7bWFyZ2luUmlnaHQ6IFwiNHB4XCJ9fT5cbiAgICAgICAgICAgIDxWSElucHV0XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgIGVycm9yPXtwcm9wcy5lcnJvcn1cbiAgICAgICAgICAgICAgICBsb2FkaW5nPXtwcm9wcy5sb2FkaW5nfVxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICBkYXRhPXtwcm9wcy5kYXRhfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICBvbkV2ZW50PXtwcm9wcy5vbkV2ZW50fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxSb3cgd2lkdGg9e1wiMTUlXCJ9PlxuICAgICAgICAgICAgPFZIQnV0dG9uIFxuICAgICAgICAgICAgICAgIHByaW1hcnkgXG4gICAgICAgICAgICAgICAgbGcgXG4gICAgICAgICAgICAgICAgb25FdmVudD17cHJvcHMub25FdmVudH0gXG4gICAgICAgICAgICAgICAgbGFiZWw9e3Byb3BzLmxhYmVsfSBcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvUm93PlxuICAgIDwvUm93PlxuICApXG59XG5cblZISW5wdXRTaW1wbGVXaXRoQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBlcnJvcjogZmFsc2UsXG4gICAgbG9hZGluZzogZmFsc2UsXG59XG5cblZISW5wdXRTaW1wbGVXaXRoQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvYWRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uRXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGRhdGF0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxufVxuXG5leHBvcnQgZGVmYXVsdCBWSElucHV0U2ltcGxlV2l0aEJ1dHRvbjtcbiJdfQ==